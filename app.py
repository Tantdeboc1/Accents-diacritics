# -*- coding: utf-8 -*-
import streamlit as st
import unicodedata
import re
import unicodedata
from datetime import datetime
import random
# ===========================
# Configuraci√≥n de p√°gina
# ===========================
st.set_page_config(
    page_title="üìò Monos√≠l¬∑labs: accents diacr√≠tics en valenci√†",
    page_icon="üìò",
    layout="centered",
)

st.title("üìò Monos√≠l¬∑labs: accents diacr√≠tics en valenci√†")
st.caption("Consulta definicions, exemples i parelles")

with st.expander("Saps qu√® √©s un monos√≠l¬∑lab?"):
    st.markdown(
        "**Monos√≠l¬∑lab**: paraula d‚Äôuna sola s√≠l¬∑laba.\n\n"
        "**Accent diacr√≠tic**: accent que diferencia paraules hom√≤grafes amb "
        "significats o funcions gramaticals distintes (p. ex., **m√©s** vs **mes**, **t√©** vs **te**)."
    )
# ===========================
# Utilidades
# ===========================

def _is_accented(word: str) -> bool:
    # True si la palabra tiene marca diacr√≠tica (√°, √©, √≠, √≥, √∫, √†, √®, √≤, √Ø, √º, etc.)
    nfd = unicodedata.normalize("NFD", word or "")
    return any(unicodedata.category(ch) == "Mn" for ch in nfd)

def color_word(word: str) -> str:
    # Devuelve Markdown con color: azul si acentuada, gris si no
    return f":blue[{word}]" if _is_accented(word) else f":gray[{word}]"

def search_suggestions(prefix: str):
     """Sugerencias por inicial (sin quitar acentos)."""
     inicial = prefix.strip().lower()[:1]
     return sorted([w for w in monosilabos if w.lower().startswith(inicial)])

def display_word_info(paraula: str):
    info = monosilabos[paraula]

    # ‚Äî T√≠tol de la paraula en color ‚Äî
    st.markdown(f"### ‚Äî {color_word(paraula)} ‚Äî")
    st.write("**Categoria:**", info.get("categoria", "‚Äî"))
    st.write("**Definici√≥:**", info["definicion"])

    # Exemples (2 aleatoris)
    st.write("**Exemples:**")
    ej = random.sample(info["ejemplos"], k=min(2, len(info["ejemplos"])))
    for ex in ej:
        st.write(f"- {ex}")

    # Bloc per copiar: definici√≥ + exemples mostrats
    bloc = f"{paraula.capitalize()}\n{info['definicion']}\n" + "\n".join(f"- {e}" for e in ej)
    st.code(bloc)
    st.button("üìã Copiar (selecciona i copia)", help="Selecciona el bloc i copia'l")

    # ‚Äî Contrast (si existeix) ‚Äî
    if paraula in parelles:
        altra = parelles[paraula]
        if altra in monosilabos:
            info2 = monosilabos[altra]
            st.markdown(f"### ‚Äî {color_word(altra)} ‚Äî *_(contrast)_*")
            st.write("**Categoria:**", info2.get("categoria", "‚Äî"))
            st.write("**Definici√≥:**", info2["definicion"])

            # Exemples (2 aleatoris) de la parella
            st.write("**Exemples:**")
            ej2 = random.sample(info2["ejemplos"], k=min(2, len(info2["ejemplos"])))
            for ex in ej2:
                st.write(f"- {ex}")

            # Bloc per copiar de la paraula contrast
            bloc2 = f"{altra.capitalize()}\n{info2['definicion']}\n" + "\n".join(f"- {e}" for e in ej2)
            st.code(bloc2)
            st.button("üìã Copiar (selecciona i copia)", help="Selecciona el bloc i copia'l", key=f"copy_{altra}")


def make_cloze(sentence: str, word: str) -> str:
    """Devuelve la frase con la PRIMERA aparici√≥n exacta de 'word' sustituida por _____"""
    return re.sub(rf"\b{re.escape(word)}\b", "_____", sentence, count=1)

def generar_preguntas(n=10):
    """Genera hasta n preguntas (enunciado cloze + 2 opciones: correcta y su parella)."""
    preguntas = []
    bolsa = []
    for w, info in monosilabos.items():
        if w in parelles and parelles[w] in monosilabos:
            for ex in info["ejemplos"]:
                # Usar solo ejemplos que contengan la palabra tal cual (con acentos)
                if re.search(rf"\b{re.escape(w)}\b", ex):
                    bolsa.append((w, ex))
    random.shuffle(bolsa)

    for w, ex in bolsa:
        pareja = parelles[w]
        preguntas.append({
            "enunciado": make_cloze(ex, w),
            "correcta": w,
            "opciones": random.sample([w, pareja], k=2),  # baraja orden
            "pareja": pareja,
        })
        if len(preguntas) >= n:
            break
    return preguntas

# ===========================
# Dades (els 15 monos√≠l¬∑labs)
# ===========================
monosilabos = {
    "s√≠": {"categoria": "adverbi d'afirmaci√≥",
           "definicion": "Adverbi d‚Äôafirmaci√≥.",
           "ejemplos": [
               "S√≠, vindr√© dem√†.",
               "Va dir que s√≠ a la proposta.",
               "S√≠ que ho sabia.",
               "I tant que s√≠!",
               "S√≠, estic d‚Äôacord amb tu.",
               "S√≠, √©s veritat."
           ]},
    "si": {"categoria": "conjunci√≥ condicional",
           "definicion": "Conjunci√≥ condicional.",
           "ejemplos": [
               "Si plou, ens quedem a casa.",
               "Si estudies, aprovar√†s.",
               "Si vols, t‚Äôajude.",
               "Si tens temps, vine dem√†.",
               "Si no ho proves, mai ho sabr√†s."
           ]},

    "m√©s": {"categoria": "quantificador/comparatiu",
            "definicion": "Comparatiu de quantitat (‚Äòm√©s = m√°s‚Äô).",
            "ejemplos": [
                "Vull m√©s aigua.",
                "A√ß√≤ √©s m√©s car que all√≤.",
                "Necessitem m√©s temps.",
                "Cada dia estudie m√©s hores.",
                "Vol m√©s caf√® al mat√≠.",
                "Hi ha m√©s gent a la pla√ßa hui."
            ]},
    "mes": {"categoria": "nom (mes del calendari)",
            "definicion": "Nom del calendari.",
            "ejemplos": [
                "El mes de juny fa calor.",
                "Cada mes estalvie un poc.",
                "Aquest mes comen√ßarem.",
                "El pr√≤xim mes hi haur√† vacances.",
                "√âs el mes m√©s llarg de l‚Äôany."
            ]},

    "b√©": {"categoria": "adverbi",
           "definicion": "Adverbi (‚Äòb√© = bien‚Äô).",
           "ejemplos": [
               "Estic b√©, gr√†cies.",
               "Fes-ho b√©, si us plau.",
               "No m‚Äôha paregut b√©.",
               "Treballa molt b√© sota pressi√≥.",
               "Tot ha eixit b√© al final."
           ]},
    "be": {"categoria": "nom (animal jove)",
           "definicion": "Nom: ‚Äòcorder‚Äô, ‚Äòovella jove‚Äô.",
           "ejemplos": [
               "Va comprar un be al mercat.",
               "El be pastura al camp.",
               "Han nascut dos bens.",
               "El be balava sense parar.",
               "El pastor cuidava un be malalt."
           ]},

    "d√©u": {"categoria": "nom propi (entitat divina)",
            "definicion": "Nom: ‚Äòd√©u = dios‚Äô.",
            "ejemplos": [
                "Crec en un sol D√©u.",
                "El D√©u dels antics era venerat.",
                "La gent resava al seu D√©u.",
                "Van construir un temple dedicat a D√©u.",
                "D√©u √©s omnipotent segons la fe."
            ]},
    "deu": {"categoria": "numeral / forma de ‚Äòdeure‚Äô",
            "definicion": "Nombre ‚Äòdeu = diez‚Äô o forma de ‚Äòdeure‚Äô (ha/han de).",
            "ejemplos": [
                "En t√© deu cromos.",
                "Deu estudiar m√©s per a aprovar.",
                "Deu ser tard.",
                "Han arribat deu persones.",
                "Deu treballar molt per aconseguir-ho."
            ]},

    "√©s": {"categoria": "verb ‚Äòser‚Äô (3a sing.)",
           "definicion": "Forma verbal del verb ‚Äòser‚Äô.",
           "ejemplos": [
               "Ell √©s professor.",
               "La casa √©s gran.",
               "√âs evident.",
               "El llibre √©s interessant.",
               "√âs massa tard per eixir.",
               "√âs el meu millor amic."
           ]},
    "es": {"categoria": "pronom",
           "definicion": "Pronom personal.",
           "ejemplos": [
               "Es pentina cada mat√≠.",
               "Es va caure al terra.",
               "Es mira al mirall.",
               "Es van saludar cordialment.",
               "Es va vestir r√†pidament."
           ]},

    "m√†": {"categoria": "nom (part del cos)",
           "definicion": "Part del cos (‚Äòm√† = mano‚Äô).",
           "ejemplos": [
               "La m√† em fa mal.",
               "Agafa‚Äôm de la m√†.",
               "D√≥na‚Äôm la m√†.",
               "Al√ßa la m√† per preguntar.",
               "Va escriure amb la m√† esquerra."
           ]},
    "ma": {"categoria": "adjectiu possessiu",
           "definicion": "Adjectiu possessiu (‚Äòma = mi‚Äô).",
           "ejemplos": [
               "Ma casa √©s la teua.",
               "Ma mare treballa ac√≠.",
               "Ma germana vindr√†.",
               "Ma terra √©s especial per a mi.",
               "Ma fam√≠lia viu al poble."
           ]},

    "m√≥n": {"categoria": "nom",
            "definicion": "‚ÄòM√≥n = mundo‚Äô.",
            "ejemplos": [
                "El m√≥n √©s gran.",
                "Viatjar pel m√≥n √©s enriquidor.",
                "√âs el meu m√≥n.",
                "El m√≥n canvia r√†pidament.",
                "Tot el m√≥n ho sap."
            ]},
    "mon": {"categoria": "possessiu arcaic",
            "definicion": "Possessiu arcaic (‚Äòmon = mi‚Äô).",
            "ejemplos": [
                "Mon pare treballa al camp.",
                "Mon oncle viu lluny.",
                "Mon cos√≠ √©s menut.",
                "Mon avi sempre conta hist√≤ries.",
                "Mon germ√† juga al futbol."
            ]},
  "p√®l": {"categoria": "nom",
            "definicion": "‚ÄòP√®l = pelo, cabell‚Äô (filament).",
            "ejemplos": [
                "Tens un p√®l al jersei.",
                "El gat ha deixat p√®l al sof√†.",
                "Se m‚Äôha caigut un p√®l.",
                "El p√®l √©s molt fi.",
                "Els gossos muden el p√®l a la primavera."
            ]},
    "pel": {"categoria": "contracci√≥ (‚Äòper el‚Äô)",
            "definicion": "Contracci√≥ de ‚Äòper el‚Äô.",
            "ejemplos": [
                "Passe pel carrer major.",
                "Vaig pel cam√≠ antic.",
                "Mira pel finestral.",
                "Corre pel passad√≠s.",
                "Busca pel calaix."
            ]},

    "qu√®": {"categoria": "pronom interrogatiu/exclamatiu",
            "definicion": "Pronom interrogatiu/exclamatiu.",
            "ejemplos": [
                "Qu√® vols menjar?",
                "Mira qu√® ha passat!",
                "Qu√® tal est√†s?",
                "Qu√® fas ac√≠?",
                "Qu√® vols dir exactament?"
            ]},
    "que": {"categoria": "conjunci√≥ / pronom relatiu",
            "definicion": "Conjunci√≥ o pronom relatiu.",
            "ejemplos": [
                "Pensa que vindr√†.",
                "El llibre que llegisc √©s interessant.",
                "Diuen que plour√†.",
                "Crec que tens ra√≥.",
                "√âs el projecte que esper√†vem."
            ]},

    "s√©": {"categoria": "verb ‚Äòsaber‚Äô (1a sing.)",
           "definicion": "Forma verbal de ‚Äòsaber‚Äô.",
           "ejemplos": [
               "Jo s√© la resposta.",
               "No s√© qu√® dir-te.",
               "S√© que tens ra√≥.",
               "No s√© si vindr√†.",
               "S√© tocar la guitarra."
           ]},
    "se": {"categoria": "pronom",
           "definicion": "Pronom personal.",
           "ejemplos": [
               "Se‚Äôn va anar de pressa.",
               "Se sent feli√ß.",
               "Se‚Äôn recorda sovint.",
               "Se n‚Äôan√† corrent.",
               "Se sorprengu√© amb la not√≠cia."
           ]},

    "s√≤l": {"categoria": "nom (terra ferma/suelo)",
            "definicion": "‚ÄòS√≤l = suelo, terra ferma‚Äô.",
            "ejemplos": [
                "El s√≤l est√† mullat.",
                "No poses aix√≤ al s√≤l.",
                "El s√≤l √©s irregular.",
                "El s√≤l de la cuina √©s nou.",
                "El s√≤l forestal √©s ric en nutrients."
            ]},
    "sol": {"categoria": "nom (astre) / adjectiu (‚Äòsol = a soles‚Äô)",
            "definicion": "Nom (astre ‚Äòsol‚Äô) o adjectiu (‚Äòsol = solo‚Äô).",
            "ejemplos": [
                "El sol brilla.",
                "Estic sol a casa.",
                "Prefereix estar sol.",
                "El sol escalfa la terra.",
                "El sol es pon a l‚Äôoest."
            ]},

    "s√≥n": {"categoria": "verb ‚Äòser‚Äô (3a pl.)",
            "definicion": "Forma verbal de ‚Äòser‚Äô (3a persona plural).",
            "ejemplos": [
                "Ells s√≥n amics.",
                "Les cases s√≥n grans.",
                "S√≥n ben educats.",
                "Els meus pares s√≥n mestres.",
                "S√≥n de Val√®ncia."
            ]},
    "son": {"categoria": "nom (somnol√®ncia)",
            "definicion": "‚ÄòSon = sue√±o, ganes de dormir‚Äô.",
            "ejemplos": [
                "Tinc son.",
                "El beb√© t√© son.",
                "Em fa son llegir.",
                "Ell t√© molta son.",
                "Despr√©s de dinar em ve son."
            ]},

    "t√©": {"categoria": "verb ‚Äòtindre‚Äô (3a sing.)",
           "definicion": "Forma verbal de ‚Äòtindre‚Äô.",
           "ejemplos": [
               "Ella t√© un cotxe.",
               "El xic t√© gana.",
               "T√© pressa.",
               "T√© tres gats a casa.",
               "T√© molta sort."
           ]},
    "te": {"categoria": "pronom / nom (beguda)",
           "definicion": "Pronom (‚Äòa tu‚Äô) o beguda (‚Äòte‚Äô).",
           "ejemplos": [
               "Aix√≤ √©s per a te.",
               "Vull un te calent.",
               "El te verd m‚Äôagrada.",
               "Beu un te amb llet.",
               "Regala‚Äôm un te d‚Äôherbes."
           ]},

    "√∫s": {"categoria": "nom",
           "definicion": "‚Äò√ös = utilizaci√≥n‚Äô d‚Äôalguna cosa.",
           "ejemplos": [
               "L‚Äô√∫s del m√≤bil est√† regulat.",
               "Fa √∫s del diccionari.",
               "En limita l‚Äô√∫s.",
               "L‚Äô√∫s de pl√†stic ha disminu√Øt.",
               "Estudia l‚Äô√∫s correcte dels verbs."
           ]},
    "us": {"categoria": "pronom (a vosaltres)",
           "definicion": "Pronom personal (‚Äòa vosaltres‚Äô).",
           "ejemplos": [
               "Us espere a la porta.",
               "Ja us he vist.",
               "Us ho explique despr√©s.",
               "Us recomane aquest llibre.",
               "Us vaig telefonar ahir."
           ]},

    "v√≥s": {"categoria": "pronom de cortesia",
            "definicion": "Pronom personal de cortesia.",
            "ejemplos": [
                "V√≥s sou benvingut.",
                "Com esteu, v√≥s?",
                "Gr√†cies a v√≥s.",
                "V√≥s teniu la paraula.",
                "V√≥s sereu recordat sempre."
            ]},
    "vos": {"categoria": "pronom (a vosaltres)",
            "definicion": "Pronom personal (‚Äòa vosaltres‚Äô).",
            "ejemplos": [
                "Vos estime molt.",
                "Vos ajudar√© en tot.",
                "Vos ho dir√© dem√†.",
                "Vos vaig veure ahir.",
                "Vos vaig escriure un missatge."
            ]},
}


pares = [
    ("b√©", "be"),
    ("d√©u", "deu"),
    ("√©s", "es"),
    ("m√†", "ma"),
    ("m√©s", "mes"),
    ("m√≥n", "mon"),
    ("p√®l", "pel"),
    ("qu√®", "que"),
    ("s√©", "se"),
    ("s√≤l", "sol"),
    ("s√≥n", "son"),
    ("t√©", "te"),
    ("√∫s", "us"),
    ("v√≥s", "vos"),
    ("s√≠", "si"),
]

parelles = {}
for acent, sense in pares:
    parelles[acent] = sense
    parelles[sense] = acent

# ===========================
# Estado de sesi√≥n
# ===========================
if "historial" not in st.session_state:
    st.session_state.historial = []
    
# Estat per al quiz
if "quiz" not in st.session_state:
    st.session_state.quiz = None
if "quiz_n" not in st.session_state:
    st.session_state.quiz_n = 10  # valor per defecte
if "scores" not in st.session_state:
    st.session_state.scores = []  # llista de dicts: {"nom": "...", "puntuacio": x, "total": y, "data": "AAAA-MM-DD HH:MM"}

# ===========================
# Barra lateral (men√∫)
# ===========================
with st.sidebar:
    st.header("Men√∫")
    opcio = st.radio(
        "Acci√≥",
        ["üîé Cerca un monos√≠l¬∑lab", "üìÉ Llista", "üìö Llista detallada", "üïò Historial", "üìù Mini-quiz"],
        index=0
    )
    st.divider()
# Marca de versi√≥ autom√†tica

with st.sidebar:
    st.info(f"Versi√≥ de l‚Äôapp: {datetime.now():%Y-%m-%d %H:%M:%S}")
# ===========================
# Vistas
# ===========================
if opcio == "üîé Cerca un monos√≠l¬∑lab":
    st.header("Cerca un monos√≠l¬∑lab")
    paraula_input = st.text_input(
        "Escriu el monos√≠l¬∑lab (amb o sense accent):",
        placeholder="Ex: m√©s, que, s√≠..."
    )

    if paraula_input:
        p = paraula_input.strip().lower()
        key = p if p in monosilabos else None

        if key:
            # A√±adir al historial (evita duplicados consecutivos)
            if not st.session_state.historial or st.session_state.historial[-1] != key:
                st.session_state.historial.append(key)

            # Mostrar informaci√≥n
            display_word_info(key)

        else:
            st.warning("No est√† en la base de dades. Revisa l'accent.")
            # Mostrar pistes amb colors
            sugerides = search_suggestions(paraula_input)
            if sugerides:
                st.markdown("**Pistes (mateixa lletra inicial):** " + ", ".join(color_word(w) for w in sugerides))
            else:
                st.markdown("**Paraules disponibles:** " + ", ".join(color_word(w) for w in sorted(monosilabos.keys())))



elif opcio == "üìÉ Llista":
    st.header("Monos√≠l¬∑labs disponibles (en parelles)")
    for acent, sense in pares:
        st.markdown(f"- {color_word(acent)} / {color_word(sense)}")

elif opcio == "üìö Llista detallada":
    st.header("Monos√≠l¬∑labs amb definicions i exemples")
    for acent, sense in pares:
        for p in (acent, sense):
            if p in monosilabos:
                info = monosilabos[p]
                st.markdown(f"**‚Äî {color_word(p)} ‚Äî**")
                st.write("**Categoria:**", info.get("categoria", "‚Äî"))
                st.write("**Definici√≥:**", info["definicion"])
                st.write("**Exemples:**")
                for ex in info["ejemplos"]:
                    st.write(f"- {ex}")

elif opcio == "üïò Historial":
    st.header("Historial de cerques")
    if st.session_state.historial:
        for h in st.session_state.historial:
            st.write("-", h)
        # Bot√≥n para limpiar historial (lo dejamos ya preparado)
        if st.button("üßπ Netejar historial"):
            st.session_state.historial.clear()
            st.success("Historial netejat.")
    else:
        st.write("Encara no hi ha cerques.")
        
elif opcio == "üìù Mini-quiz":
    st.header("Mini-quiz: tria la forma correcta")

    # -------- Estado inicial necesario --------
    if "quiz" not in st.session_state:
        st.session_state.quiz = None
    if "quiz_n" not in st.session_state:
        st.session_state.quiz_n = 10  # valor por defecte
    if "scores" not in st.session_state:
        st.session_state.scores = []  # {"nom": "...", "puntuacio": x, "total": y, "data": "AAAA-MM-DD HH:MM"}

    # -------- Selector n¬∫ de preguntes + bot√≥n nuevo quiz --------
    col_sel, col_btn = st.columns([1, 1])
    with col_sel:
        st.session_state.quiz_n = st.selectbox(
            "Nombre de preguntes",
            options=[5, 10, 20],
            index=[5, 10, 20].index(st.session_state.get("quiz_n", 10)),
            help="Tria quantes preguntes vols per al quiz."
        )
    with col_btn:
        if st.button(f"üîÅ Nou quiz ({st.session_state.quiz_n} preguntes)", key="btn_new_quiz_top"):
            preg = generar_preguntas(st.session_state.quiz_n)
            if not preg:
                st.error("No s'han pogut generar preguntes. Revisa que els exemples continguen la paraula exacta.")
            else:
                st.session_state.quiz = {
                    "preguntas": preg,
                    "respuestas": [None] * len(preg),
                    "terminado": False,
                    "guardat": False
                }

    quiz = st.session_state.get("quiz")

    # -------- Si no hi ha quiz, indicaci√≥ --------
    if not quiz:
        st.info("Prem **Nou quiz** per a comen√ßar.")
    else:
        # -------- Render de preguntes (2 opcions en desplegable) --------
        for i, q in enumerate(quiz["preguntas"]):
            st.markdown(f"**{i+1}.** {q['enunciado']}")
            seleccion = st.selectbox(
                f"Tria la forma correcta ({i+1})",
                options=["‚Äî"] + q["opciones"],
                index=(["‚Äî"] + q["opciones"]).index(quiz["respuestas"][i]) if quiz["respuestas"][i] in q["opciones"] else 0,
                key=f"sel_{i}"
            )
            quiz["respuestas"][i] = seleccion if seleccion != "‚Äî" else None
            st.write("")

        # -------- Bot√≥ d'enviament --------
        if not quiz["terminado"]:
            if st.button("‚úÖ Enviar respostes", key="btn_submit_quiz"):
                quiz["terminado"] = True

        # -------- Correcci√≥ i feedback --------
        if quiz["terminado"]:
            contestades = sum(1 for r in quiz["respuestas"] if r is not None)
            if contestades < len(quiz["preguntas"]):
                st.warning(f"Has deixat {len(quiz['preguntas']) - contestades} sense contestar.")

            correctes = 0
            fallos = []
            for i, q in enumerate(quiz["preguntas"]):
                if quiz["respuestas"][i] == q["correcta"]:
                    correctes += 1
                else:
                    fallos.append((i, q, quiz["respuestas"][i]))

            total = len(quiz["preguntas"])
            st.success(f"Puntuaci√≥: **{correctes}/{total}**")

            if fallos:
                st.error("Rep√†s d'errors:")
                for i, q, elegida in fallos:
                    def_ok = monosilabos[q["correcta"]]["definicion"]
                    def_p = monosilabos[q["pareja"]]["definicion"]
                    solucio = q["enunciado"].replace("_____", f"**{q['correcta']}**")
                    st.markdown(
                        f"- **{i+1}.** {solucio}"
                        f"<br/>Resposta triada: *{elegida or '‚Äî'}*  |  Correcta: **{q['correcta']}**"
                        f"<br/>¬∑ {q['correcta']}: {def_ok}"
                        f"<br/>¬∑ {q['pareja']}: {def_p}",
                        unsafe_allow_html=True
                    )

            st.divider()

            # -------- R√†nquing estil arcade --------
            st.subheader("üèÜ R√†nquing (estil arcade)")
            col_nom, col_guardar = st.columns([2, 1])
            with col_nom:
                nom_input = st.text_input(
                    "Escriu el teu nom (5 lletres m√†x.)",
                    max_chars=5,
                    placeholder="p.ex. JOSEP",
                    help="Nom curt per a la classificaci√≥. 1‚Äì5 lletres (A‚ÄìZ)."
                )
            with col_guardar:
                from datetime import datetime
                if st.button("üíæ Guardar puntuaci√≥", key="btn_save_score", disabled=quiz.get("guardat", False)):
                    nom_clean = (nom_input or "").strip().upper()
                    import re
                    if not re.fullmatch(r"[A-Z]{1,5}", nom_clean):
                        st.error("Nom inv√†lid. Usa 1‚Äì5 lletres (A‚ÄìZ), sense espais ni n√∫meros.")
                    else:
                        record = {
                            "nom": nom_clean,
                            "puntuacio": correctes,
                            "total": total,
                            "data": datetime.now().strftime("%Y-%m-%d %H:%M")
                        }
                        # 1) Desa en mem√≤ria de sessi√≥
                        st.session_state.scores.append(record)

                        # 2) (Opcional) si tens integrat guardat a GitHub:
                        if "append_score_to_github" in globals():
                            try:
                                ok = append_score_to_github(record)
                                if ok:
                                    st.success("Puntuaci√≥ guardada al r√†nquing (persist√®ncia a GitHub)!")
                                else:
                                    st.warning("S'ha guardat en mem√≤ria, per√≤ no a GitHub.")
                            except Exception as e:
                                st.warning("No s'ha pogut guardar a GitHub; guardada en mem√≤ria.")
                        else:
                            st.info("Guardada en mem√≤ria. (Pots activar persist√®ncia a GitHub m√©s endavant.)")

                        quiz["guardat"] = True

            # -------- Mostrar r√†nquing (Top 10) --------
            # Si tens lectura remota de GitHub, pots combinar:
            scores_all = st.session_state.scores[:]  # b√†sic: nom√©s mem√≤ria
            # (Opcional) carregar del repo si tens load_scores_from_github():
            if "load_scores_from_github" in globals():
                try:
                    scores_remote, _ = load_scores_from_github()
                    # barreja senzill: afegeix locals que no estiguen al remot
                    for s in scores_remote:
                        if s not in scores_all:
                            scores_all.append(s)
                except Exception:
                    pass

            if scores_all:
                scores_sorted = sorted(
                    scores_all,
                    key=lambda x: (x["puntuacio"], x["data"]),
                    reverse=True
                )

                st.markdown("**Top 10**")
                for idx, s in enumerate(scores_sorted[:10], start=1):
                    barra = "‚ñà" * max(1, int(10 * s["puntuacio"] / s["total"]))
                    st.write(f"{idx:>2}. {s['nom']} ‚Äî {s['puntuacio']}/{s['total']}  ({s['data']})  {barra}")

                # Descarrega CSV del r√†nquing actual
                import io, csv
                buf = io.StringIO()
                w = csv.writer(buf)
                w.writerow(["posicio", "nom", "puntuacio", "total", "data"])
                for idx, s in enumerate(scores_sorted, start=1):
                    w.writerow([idx, s["nom"], s["puntuacio"], s["total"], s["data"]])
                st.download_button(
                    "‚¨áÔ∏è Descarregar r√†nquing (CSV)",
                    buf.getvalue().encode("utf-8"),
                    file_name="ranquing_quiz.csv",
                    mime="text/csv",
                    key="btn_download_scores"
                )

            st.divider()

            # -------- Botons finals --------
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üîÅ Repetir (mateix quiz)", key="btn_repeat_same"):
                    quiz["terminado"] = False
            with col2:
                if st.button("üÜï Nou quiz diferent", key="btn_new_quiz_diff"):
                    preg = generar_preguntas(st.session_state.quiz_n)
                    if not preg:
                        st.error("No s'han pogut generar preguntes noves.")
                    else:
                        st.session_state.quiz = {
                            "preguntas": preg,
                            "respuestas": [None] * len(preg),
                            "terminado": False,
                            "guardat": False
                        }


















