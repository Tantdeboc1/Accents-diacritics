# -*- coding: utf-8 -*-
import streamlit as st
import unicodedata
import re
from datetime import datetime
import random
import json, base64, requests, time
# ===========================
# Configuraci√≥n de p√°gina
# ===========================
st.set_page_config(
    page_title="üìò Monos√≠l¬∑labs: accents diacr√≠tics en valenci√†",
    page_icon="üìò",
    layout="centered",
)
st.markdown("""
<style>
.block-container { padding-bottom: 2rem !important; }
</style>
""", unsafe_allow_html=True)
st.title("üìò Monos√≠l¬∑labs: accents diacr√≠tics en valenci√†")
st.caption("Consulta definicions, exemples i parelles")

with st.expander("Saps qu√® √©s un monos√≠l¬∑lab?"):
    st.markdown(
        "**Monos√≠l¬∑lab**: paraula d‚Äôuna sola s√≠l¬∑laba.\n\n"
        "**Accent diacr√≠tic**: accent que diferencia paraules hom√≤grafes amb "
        "significats o funcions gramaticals distintes (p. ex., **m√©s** vs **mes**, **t√©** vs **te**)."
    )
# ===========================
# Utilidades
# ===========================

def _is_accented(word: str) -> bool:
    # True si la palabra tiene marca diacr√≠tica (√°, √©, √≠, √≥, √∫, √†, √®, √≤, √Ø, √º, etc.)
    nfd = unicodedata.normalize("NFD", word or "")
    return any(unicodedata.category(ch) == "Mn" for ch in nfd)

def color_word(word: str) -> str:
    # Devuelve Markdown con color: azul si acentuada, gris si no
    return f":blue[{word}]" if _is_accented(word) else f":gray[{word}]"

def search_suggestions(prefix: str):
     """Sugerencias por inicial (sin quitar acentos)."""
     inicial = prefix.strip().lower()[:1]
     return sorted([w for w in monosilabos if w.lower().startswith(inicial)])

def display_word_info(paraula: str):
    info = monosilabos[paraula]

    # ‚Äî T√≠tol de la paraula en color ‚Äî
    st.markdown(f"### ‚Äî {color_word(paraula)} ‚Äî")
    st.write("**Categoria:**", info.get("categoria", "‚Äî"))
    st.write("**Definici√≥:**", info["definicion"])

    # Exemples (2 aleatoris)
    st.write("**Exemples:**")
    ej = random.sample(info["ejemplos"], k=min(2, len(info["ejemplos"])))
    for ex in ej:
        st.write(f"- {ex}")

    # Bloc per copiar: definici√≥ + exemples mostrats
    bloc = f"{paraula.capitalize()}\n{info['definicion']}\n" + "\n".join(f"- {e}" for e in ej)
    st.code(bloc)
    st.button("üìã Copiar (selecciona i copia)", help="Selecciona el bloc i copia'l")

    # ‚Äî Contrast (si existeix) ‚Äî
    if paraula in parelles:
        altra = parelles[paraula]
        if altra in monosilabos:
            info2 = monosilabos[altra]
            st.markdown(f"### ‚Äî {color_word(altra)} ‚Äî *_(contrast)_*")
            st.write("**Categoria:**", info2.get("categoria", "‚Äî"))
            st.write("**Definici√≥:**", info2["definicion"])

            # Exemples (2 aleatoris) de la parella
            st.write("**Exemples:**")
            ej2 = random.sample(info2["ejemplos"], k=min(2, len(info2["ejemplos"])))
            for ex in ej2:
                st.write(f"- {ex}")

            # Bloc per copiar de la paraula contrast
            bloc2 = f"{altra.capitalize()}\n{info2['definicion']}\n" + "\n".join(f"- {e}" for e in ej2)
            st.code(bloc2)
            st.button("üìã Copiar (selecciona i copia)", help="Selecciona el bloc i copia'l", key=f"copy_{altra}")

def rerun_safe():
    """Forza un rerun compatible con versiones nuevas/antiguas de Streamlit."""
    try:
        st.rerun()              # versiones nuevas
    except Exception:
        try:
            st.experimental_rerun()  # versiones antiguas
        except Exception:
            pass

def make_cloze(sentence: str, word: str) -> str:
    """Devuelve la frase con la PRIMERA aparici√≥n exacta de 'word' sustituida por _____"""
    return re.sub(rf"\b{re.escape(word)}\b", "_____", sentence, count=1)

def generar_preguntas(n=10):
    """Genera hasta n preguntas (enunciado cloze + 2 opciones: correcta y su parella)."""
    preguntas = []
    bolsa = []
    for w, info in monosilabos.items():
        if w in parelles and parelles[w] in monosilabos:
            for ex in info["ejemplos"]:
                # Usar solo ejemplos que contengan la palabra tal cual (con acentos)
                if re.search(rf"\b{re.escape(w)}\b", ex):
                    bolsa.append((w, ex))
    random.shuffle(bolsa)

    for w, ex in bolsa:
        pareja = parelles[w]
        preguntas.append({
            "enunciado": make_cloze(ex, w),
            "correcta": w,
            "opciones": random.sample([w, pareja], k=2),  # baraja orden
            "pareja": pareja,
        })
        if len(preguntas) >= n:
            break
    return preguntas
    
def generar_quiz(n=10):
    """Adapta generar_preguntas() al formato que espera el Mini-quiz."""
    preguntas = generar_preguntas(n)
    return {
        "preguntas": preguntas,
        "respuestas": [None] * len(preguntas)
    }

# ==== GitHub helpers: guardar/leer ranking en scores.jsonl ====
def _gh_headers():
    return {
        "Authorization": f"Bearer {st.secrets['GITHUB_TOKEN']}",
        "Accept": "application/vnd.github+json",
        "X-GitHub-Api-Version": "2022-11-28",
    }

def _gh_file_url():
    owner_repo = st.secrets["GITHUB_REPO"]
    branch = st.secrets.get("GITHUB_BRANCH", "main")
    path = st.secrets.get("GITHUB_SCORES_PATH", "scores.jsonl")
    return f"https://api.github.com/repos/{owner_repo}/contents/{path}?ref={branch}"

def _gh_put_url():
    owner_repo = st.secrets["GITHUB_REPO"]
    path = st.secrets.get("GITHUB_SCORES_PATH", "scores.jsonl")
    return f"https://api.github.com/repos/{owner_repo}/contents/{path}"

@st.cache_data(ttl=60)  # üëà Cachea la lectura 60s (ajusta el ttl si quieres)
def load_scores_from_github():
    """
    Lee el JSONL del repo.
    Devuelve (scores:list, sha:str|None). Si no existe, ([], None).
    """
    try:
        r = requests.get(_gh_file_url(), headers=_gh_headers(), timeout=10)
        if r.status_code == 404:
            return [], None  # fichero a√∫n no creado
        r.raise_for_status()
        data = r.json()
        content_b64 = data["content"]
        sha = data["sha"]
        content = base64.b64decode(content_b64).decode("utf-8", errors="ignore")
        scores = []
        for line in content.splitlines():
            if line.strip():
                scores.append(json.loads(line))
        return scores, sha
    except Exception as e:
        st.error(f"Error leyendo r√°nking de GitHub: {e}")
        return [], None

def append_score_to_github(record: dict, max_retries=3):
    """
    A√±ade un registro al JSONL en GitHub con control de conflictos.
    Flujo:
      - GET: leer contenido y sha
      - APPEND: a√±adir l√≠nea
      - PUT: subir con sha (si existe)
    """
    for attempt in range(max_retries):
        scores, sha = load_scores_from_github()
        lines = [json.dumps(s, ensure_ascii=False) for s in scores]
        lines.append(json.dumps(record, ensure_ascii=False))
        new_content = "\n".join(lines) + "\n"

        payload = {
            "message": f"Add score: {record.get('nom','???')} {record.get('puntuacio','?')}/{record.get('total','?')}",
            "content": base64.b64encode(new_content.encode("utf-8")).decode("utf-8"),
            "branch": st.secrets.get("GITHUB_BRANCH", "main"),
        }
        if sha:
            payload["sha"] = sha

        try:
            r = requests.put(_gh_put_url(), headers=_gh_headers(), json=payload, timeout=15)
            if r.status_code in (200, 201):
                # ‚úÖ Guardado correcto ‚Üí vaciamos la cach√© de lectura para ver el cambio al instante
                st.cache_data.clear()
                return True
            if r.status_code == 409:  # conflicto: el fichero ha cambiado; reintentar
                time.sleep(0.8)
                continue
            r.raise_for_status()
            # si llega aqu√≠ sin excepci√≥n, lo consideramos OK por seguridad
            st.cache_data.clear()
            return True
        except Exception as e:
            if attempt == max_retries - 1:
                st.error(f"No se ha podido guardar en el r√°nking (GitHub): {e}")
                return False
            time.sleep(0.8)
    return False
# ==== (fi helpers GitHub) ====

# ===========================
# Dades (els 15 monos√≠l¬∑labs)
# ===========================
monosilabos = {
    "s√≠": {"categoria": "adverbi d'afirmaci√≥",
           "definicion": "Adverbi d‚Äôafirmaci√≥.",
           "ejemplos": [
               "S√≠, vindr√© dem√†.",
               "Va dir que s√≠ a la proposta.",
               "S√≠ que ho sabia.",
               "I tant que s√≠!",
               "S√≠, estic d‚Äôacord amb tu.",
               "S√≠, √©s veritat."
           ]},
    "si": {"categoria": "conjunci√≥ condicional",
           "definicion": "Conjunci√≥ condicional.",
           "ejemplos": [
               "Si plou, ens quedem a casa.",
               "Si estudies, aprovar√†s.",
               "Si vols, t‚Äôajude.",
               "Si tens temps, vine dem√†.",
               "Si no ho proves, mai ho sabr√†s."
           ]},

    "m√©s": {"categoria": "quantificador/comparatiu",
            "definicion": "Comparatiu de quantitat (‚Äòm√©s = m√°s‚Äô).",
            "ejemplos": [
                "Vull m√©s aigua.",
                "A√ß√≤ √©s m√©s car que all√≤.",
                "Necessitem m√©s temps.",
                "Cada dia estudie m√©s hores.",
                "Vol m√©s caf√® al mat√≠.",
                "Hi ha m√©s gent a la pla√ßa hui."
            ]},
    "mes": {"categoria": "nom (mes del calendari)",
            "definicion": "Nom del calendari.",
            "ejemplos": [
                "El mes de juny fa calor.",
                "Cada mes estalvie un poc.",
                "Aquest mes comen√ßarem.",
                "El pr√≤xim mes hi haur√† vacances.",
                "√âs el mes m√©s llarg de l‚Äôany."
            ]},

    "b√©": {"categoria": "adverbi",
           "definicion": "Adverbi (‚Äòb√© = bien‚Äô).",
           "ejemplos": [
               "Estic b√©, gr√†cies.",
               "Fes-ho b√©, si us plau.",
               "No m‚Äôha paregut b√©.",
               "Treballa molt b√© sota pressi√≥.",
               "Tot ha eixit b√© al final."
           ]},
    "be": {"categoria": "nom (animal jove)",
           "definicion": "Nom: ‚Äòcorder‚Äô, ‚Äòovella jove‚Äô.",
           "ejemplos": [
               "Va comprar un be al mercat.",
               "El be pastura al camp.",
               "Han nascut dos bens.",
               "El be balava sense parar.",
               "El pastor cuidava un be malalt."
           ]},

    "d√©u": {"categoria": "nom propi (entitat divina)",
            "definicion": "Nom: ‚Äòd√©u = dios‚Äô.",
            "ejemplos": [
                "Crec en un sol D√©u.",
                "El D√©u dels antics era venerat.",
                "La gent resava al seu D√©u.",
                "Van construir un temple dedicat a D√©u.",
                "D√©u √©s omnipotent segons la fe."
            ]},
    "deu": {"categoria": "numeral / forma de ‚Äòdeure‚Äô",
            "definicion": "Nombre ‚Äòdeu = diez‚Äô o forma de ‚Äòdeure‚Äô (ha/han de).",
            "ejemplos": [
                "En t√© deu cromos.",
                "Deu estudiar m√©s per a aprovar.",
                "Deu ser tard.",
                "Han arribat deu persones.",
                "Deu treballar molt per aconseguir-ho."
            ]},

    "√©s": {"categoria": "verb ‚Äòser‚Äô (3a sing.)",
           "definicion": "Forma verbal del verb ‚Äòser‚Äô.",
           "ejemplos": [
               "Ell √©s professor.",
               "La casa √©s gran.",
               "√âs evident.",
               "El llibre √©s interessant.",
               "√âs massa tard per eixir.",
               "√âs el meu millor amic."
           ]},
    "es": {"categoria": "pronom",
           "definicion": "Pronom personal.",
           "ejemplos": [
               "Es pentina cada mat√≠.",
               "Es va caure al terra.",
               "Es mira al mirall.",
               "Es van saludar cordialment.",
               "Es va vestir r√†pidament."
           ]},

    "m√†": {"categoria": "nom (part del cos)",
           "definicion": "Part del cos (‚Äòm√† = mano‚Äô).",
           "ejemplos": [
               "La m√† em fa mal.",
               "Agafa‚Äôm de la m√†.",
               "D√≥na‚Äôm la m√†.",
               "Al√ßa la m√† per preguntar.",
               "Va escriure amb la m√† esquerra."
           ]},
    "ma": {"categoria": "adjectiu possessiu",
           "definicion": "Adjectiu possessiu (‚Äòma = mi‚Äô).",
           "ejemplos": [
               "Ma casa √©s la teua.",
               "Ma mare treballa ac√≠.",
               "Ma germana vindr√†.",
               "Ma terra √©s especial per a mi.",
               "Ma fam√≠lia viu al poble."
           ]},

    "m√≥n": {"categoria": "nom",
            "definicion": "‚ÄòM√≥n = mundo‚Äô.",
            "ejemplos": [
                "El m√≥n √©s gran.",
                "Viatjar pel m√≥n √©s enriquidor.",
                "√âs el meu m√≥n.",
                "El m√≥n canvia r√†pidament.",
                "Tot el m√≥n ho sap."
            ]},
    "mon": {"categoria": "possessiu arcaic",
            "definicion": "Possessiu arcaic (‚Äòmon = mi‚Äô).",
            "ejemplos": [
                "Mon pare treballa al camp.",
                "Mon oncle viu lluny.",
                "Mon cos√≠ √©s menut.",
                "Mon avi sempre conta hist√≤ries.",
                "Mon germ√† juga al futbol."
            ]},
  "p√®l": {"categoria": "nom",
            "definicion": "‚ÄòP√®l = pelo, cabell‚Äô (filament).",
            "ejemplos": [
                "Tens un p√®l al jersei.",
                "El gat ha deixat p√®l al sof√†.",
                "Se m‚Äôha caigut un p√®l.",
                "El p√®l √©s molt fi.",
                "Els gossos muden el p√®l a la primavera."
            ]},
    "pel": {"categoria": "contracci√≥ (‚Äòper el‚Äô)",
            "definicion": "Contracci√≥ de ‚Äòper el‚Äô.",
            "ejemplos": [
                "Passe pel carrer major.",
                "Vaig pel cam√≠ antic.",
                "Mira pel finestral.",
                "Corre pel passad√≠s.",
                "Busca pel calaix."
            ]},

    "qu√®": {"categoria": "pronom interrogatiu/exclamatiu",
            "definicion": "Pronom interrogatiu/exclamatiu.",
            "ejemplos": [
                "Qu√® vols menjar?",
                "Mira qu√® ha passat!",
                "Qu√® tal est√†s?",
                "Qu√® fas ac√≠?",
                "Qu√® vols dir exactament?"
            ]},
    "que": {"categoria": "conjunci√≥ / pronom relatiu",
            "definicion": "Conjunci√≥ o pronom relatiu.",
            "ejemplos": [
                "Pensa que vindr√†.",
                "El llibre que llegisc √©s interessant.",
                "Diuen que plour√†.",
                "Crec que tens ra√≥.",
                "√âs el projecte que esper√†vem."
            ]},

    "s√©": {"categoria": "verb ‚Äòsaber‚Äô (1a sing.)",
           "definicion": "Forma verbal de ‚Äòsaber‚Äô.",
           "ejemplos": [
               "Jo s√© la resposta.",
               "No s√© qu√® dir-te.",
               "S√© que tens ra√≥.",
               "No s√© si vindr√†.",
               "S√© tocar la guitarra."
           ]},
    "se": {"categoria": "pronom",
           "definicion": "Pronom personal.",
           "ejemplos": [
               "Se‚Äôn va anar de pressa.",
               "Se sent feli√ß.",
               "Se‚Äôn recorda sovint.",
               "Se n‚Äôan√† corrent.",
               "Se sorprengu√© amb la not√≠cia."
           ]},

    "s√≤l": {"categoria": "nom (terra ferma/suelo)",
            "definicion": "‚ÄòS√≤l = suelo, terra ferma‚Äô.",
            "ejemplos": [
                "El s√≤l est√† mullat.",
                "No poses aix√≤ al s√≤l.",
                "El s√≤l √©s irregular.",
                "El s√≤l de la cuina √©s nou.",
                "El s√≤l forestal √©s ric en nutrients."
            ]},
    "sol": {"categoria": "nom (astre) / adjectiu (‚Äòsol = a soles‚Äô)",
            "definicion": "Nom (astre ‚Äòsol‚Äô) o adjectiu (‚Äòsol = solo‚Äô).",
            "ejemplos": [
                "El sol brilla.",
                "Estic sol a casa.",
                "Prefereix estar sol.",
                "El sol escalfa la terra.",
                "El sol es pon a l‚Äôoest."
            ]},

    "s√≥n": {"categoria": "verb ‚Äòser‚Äô (3a pl.)",
            "definicion": "Forma verbal de ‚Äòser‚Äô (3a persona plural).",
            "ejemplos": [
                "Ells s√≥n amics.",
                "Les cases s√≥n grans.",
                "S√≥n ben educats.",
                "Els meus pares s√≥n mestres.",
                "S√≥n de Val√®ncia."
            ]},
    "son": {"categoria": "nom (somnol√®ncia)",
            "definicion": "‚ÄòSon = sue√±o, ganes de dormir‚Äô.",
            "ejemplos": [
                "Tinc son.",
                "El beb√© t√© son.",
                "Em fa son llegir.",
                "Ell t√© molta son.",
                "Despr√©s de dinar em ve son."
            ]},

    "t√©": {"categoria": "verb ‚Äòtindre‚Äô (3a sing.)",
           "definicion": "Forma verbal de ‚Äòtindre‚Äô.",
           "ejemplos": [
               "Ella t√© un cotxe.",
               "El xic t√© gana.",
               "T√© pressa.",
               "T√© tres gats a casa.",
               "T√© molta sort."
           ]},
    "te": {"categoria": "pronom / nom (beguda)",
           "definicion": "Pronom (‚Äòa tu‚Äô) o beguda (‚Äòte‚Äô).",
           "ejemplos": [
               "Aix√≤ √©s per a te.",
               "Vull un te calent.",
               "El te verd m‚Äôagrada.",
               "Beu un te amb llet.",
               "Regala‚Äôm un te d‚Äôherbes."
           ]},

    "√∫s": {"categoria": "nom",
           "definicion": "‚Äò√ös = utilizaci√≥n‚Äô d‚Äôalguna cosa.",
           "ejemplos": [
               "L‚Äô√∫s del m√≤bil est√† regulat.",
               "Fa √∫s del diccionari.",
               "En limita l‚Äô√∫s.",
               "L‚Äô√∫s de pl√†stic ha disminu√Øt.",
               "Estudia l‚Äô√∫s correcte dels verbs."
           ]},
    "us": {"categoria": "pronom (a vosaltres)",
           "definicion": "Pronom personal (‚Äòa vosaltres‚Äô).",
           "ejemplos": [
               "Us espere a la porta.",
               "Ja us he vist.",
               "Us ho explique despr√©s.",
               "Us recomane aquest llibre.",
               "Us vaig telefonar ahir."
           ]},

    "v√≥s": {"categoria": "pronom de cortesia",
            "definicion": "Pronom personal de cortesia.",
            "ejemplos": [
                "V√≥s sou benvingut.",
                "Com esteu, v√≥s?",
                "Gr√†cies a v√≥s.",
                "V√≥s teniu la paraula.",
                "V√≥s sereu recordat sempre."
            ]},
    "vos": {"categoria": "pronom (a vosaltres)",
            "definicion": "Pronom personal (‚Äòa vosaltres‚Äô).",
            "ejemplos": [
                "Vos estime molt.",
                "Vos ajudar√© en tot.",
                "Vos ho dir√© dem√†.",
                "Vos vaig veure ahir.",
                "Vos vaig escriure un missatge."
            ]},
}


pares = [
    ("b√©", "be"),
    ("d√©u", "deu"),
    ("√©s", "es"),
    ("m√†", "ma"),
    ("m√©s", "mes"),
    ("m√≥n", "mon"),
    ("p√®l", "pel"),
    ("qu√®", "que"),
    ("s√©", "se"),
    ("s√≤l", "sol"),
    ("s√≥n", "son"),
    ("t√©", "te"),
    ("√∫s", "us"),
    ("v√≥s", "vos"),
    ("s√≠", "si"),
]

parelles = {}
for acent, sense in pares:
    parelles[acent] = sense
    parelles[sense] = acent

# ===========================
# Estado de sesi√≥n
# ===========================
if "historial" not in st.session_state:
    st.session_state.historial = []
    
# Estat per al quiz
if "quiz" not in st.session_state:
    st.session_state.quiz = None
if "quiz_n" not in st.session_state:
    st.session_state.quiz_n = 10  # valor per defecte
if "scores" not in st.session_state:
    st.session_state.scores = []  # llista de dicts: {"nom": "...", "puntuacio": x, "total": y, "data": "AAAA-MM-DD HH:MM"}

# ===========================
# Barra lateral (men√∫)
# ===========================
with st.sidebar:
    st.header("Men√∫")
    opcio = st.radio(
        "Acci√≥",
        [
            "üîé Cerca un monos√≠l¬∑lab",
            "üìÉ Llista",
            "üìö Llista detallada",
            "üïò Historial",
            "üìù Mini-quiz",
            "üèÜ R√†nquing"          
        ],
        index=0
    )
    st.divider()
    st.info(f"Versi√≥ de l‚Äôapp: {datetime.now():%Y-%m-%d %H:%M:%S}")
# ===========================
# Vistas
# ===========================
if opcio == "üîé Cerca un monos√≠l¬∑lab":
    st.header("Cerca un monos√≠l¬∑lab")
    paraula_input = st.text_input(
        "Escriu el monos√≠l¬∑lab (amb o sense accent):",
        placeholder="Ex: m√©s, que, s√≠..."
    )

    if paraula_input:
        p = paraula_input.strip().lower()
        key = p if p in monosilabos else None

        if key:
            # A√±adir al historial (evita duplicados consecutivos)
            if not st.session_state.historial or st.session_state.historial[-1] != key:
                st.session_state.historial.append(key)

            # Mostrar informaci√≥n
            display_word_info(key)

        else:
            st.warning("No est√† en la base de dades. Revisa l'accent.")
            # Mostrar pistes amb colors
            sugerides = search_suggestions(paraula_input)
            if sugerides:
                st.markdown("**Pistes (mateixa lletra inicial):** " + ", ".join(color_word(w) for w in sugerides))
            else:
                st.markdown("**Paraules disponibles:** " + ", ".join(color_word(w) for w in sorted(monosilabos.keys())))



elif opcio == "üìÉ Llista":
    st.header("Monos√≠l¬∑labs disponibles (en parelles)")
    for acent, sense in pares:
        st.markdown(f"- {color_word(acent)} / {color_word(sense)}")

elif opcio == "üìö Llista detallada":
    st.header("Monos√≠l¬∑labs amb definicions i exemples")
    for acent, sense in pares:
        for p in (acent, sense):
            if p in monosilabos:
                info = monosilabos[p]
                st.markdown(f"**‚Äî {color_word(p)} ‚Äî**")
                st.write("**Categoria:**", info.get("categoria", "‚Äî"))
                st.write("**Definici√≥:**", info["definicion"])
                st.write("**Exemples:**")
                for ex in info["ejemplos"]:
                    st.write(f"- {ex}")

elif opcio == "üïò Historial":
    st.header("Historial de cerques")
    if st.session_state.historial:
        for h in st.session_state.historial:
            st.write("-", h)
        # Bot√≥n para limpiar historial (lo dejamos ya preparado)
        if st.button("üßπ Netejar historial"):
            st.session_state.historial.clear()
            st.success("Historial netejat.")
    else:
        st.write("Encara no hi ha cerques.")
        
elif opcio == "üìù Mini-quiz":
    st.header("Mini-quiz: tria la forma correcta")

    # -------- Estado inicial necesario --------
    if "quiz" not in st.session_state:
        st.session_state.quiz = None
    if "quiz_n" not in st.session_state:
        st.session_state.quiz_n = 10  # valor per defecte
    if "scores" not in st.session_state:
        st.session_state.scores = []  # {"nom": "...", "puntuacio": x, "total": y, "data": "AAAA-MM-DD HH:MM"}
    if "quiz_corrected" not in st.session_state:
        st.session_state.quiz_corrected = False
    if "last_score" not in st.session_state:
        st.session_state.last_score = {}

    quiz = st.session_state.quiz

    # -------- Selector n¬∫ de preguntes + bot√≥n nuevo quiz --------
    col_sel, col_btn = st.columns([1, 1])
    with col_sel:
        st.session_state.quiz_n = st.selectbox(
            "Nombre de preguntes",
            options=[5, 10, 20],
            index=[5, 10, 20].index(st.session_state.get("quiz_n", 10)),
            help="Tria quantes preguntes vols que tinga el quiz."
        )
    with col_btn:
        if st.button("Nou quiz"):
            st.session_state.quiz_corrected = False
            st.session_state.last_score = {}
            quiz = generar_quiz(st.session_state.quiz_n)
            st.session_state.quiz = quiz

    # -------- Si no hi ha quiz, indicaci√≥ --------
    if not quiz:
        st.info("Prem **Nou quiz** per a comen√ßar.")
    else:
        # -------- Render de preguntes (2 opcions en desplegable) --------
        for i, q in enumerate(quiz["preguntas"]):
            st.markdown(f"**{i+1}.** {q['enunciado']}")
            seleccion = st.selectbox(
                f"Tria la forma correcta ({i+1})",
                options=["‚Äî"] + q["opciones"],
                index=(["‚Äî"] + q["opciones"]).index(quiz["respuestas"][i]) if quiz["respuestas"][i] in q["opciones"] else 0,
                key=f"sel_{i}"
            )
            quiz["respuestas"][i] = seleccion if seleccion != "‚Äî" else None
            st.write("")

        # -------- Bot√≥ per corregir --------
        if st.button("Corregir", key="btn_corregir"):
            correctes = sum(
                r == q["correcta"]
                for r, q in zip(quiz["respuestas"], quiz["preguntas"])
                if r
            )
            total = len(quiz["preguntas"])
            st.session_state.quiz_corrected = True
            st.session_state.last_score = {
                "puntuacio": correctes,
                "total": total,
                "nom": st.session_state.get("last_score", {}).get("nom", ""),
            }

        # -------- Panel post-correcci√≥ (estable en rerun) --------
        if st.session_state.get("quiz_corrected"):
            score = st.session_state.get("last_score", {})
            correctes = score.get("puntuacio", 0)
            total = score.get("total", 0)

            st.success(f"Has encertat {correctes}/{total}")

            from datetime import datetime
            st.session_state.last_score["nom"] = st.text_input(
                "El teu nom (opcional):",
                value=st.session_state.last_score.get("nom", ""),
                key="inp_nom_quiz"
            )
            data_str = datetime.now().strftime("%Y-%m-%d %H:%M")

            # üëá A PARTIR DE AQU√ç TODO VA DENTRO DEL MISMO if, BIEN INDENTADO
            colA, colB, colC = st.columns([1, 1, 1])

            with colA:
                if st.button("üíæ Guardar r√†nquing", key="btn_save_rank"):
                    # Construimos el registro con el nombre actual
                    record = {
                        "nom": st.session_state.last_score.get("nom", ""),
                        "puntuacio": correctes,
                        "total": total,
                        "data": data_str,
                    }
                    # Guarda en sesi√≥n
                    if "scores" not in st.session_state:
                        st.session_state.scores = []
                    st.session_state.scores.append(record)
                    st.success("Resultat guardat en la sessi√≥.")
                    # Guarda en GitHub (si tienes secrets configurados)
                    try:
                        if "append_score_to_github" in globals():
                            ok = append_score_to_github(record)  # este helper ya limpia la cach√©
                            if ok:
                                st.success("R√†nquing a GitHub actualitzat.")
                            else:
                                st.info("No s'ha pogut guardar a GitHub.")
                    except Exception as e:
                        st.info(f"No s'ha pogut guardar a GitHub: {e}")

            with colB:
                if st.button("üèÜ Veure r√†nquing", key="btn_go_rank"):
                    # Solo navegaci√≥n, sin guardar
                    st.session_state["menu"] = "üèÜ R√†nquing"
                    rerun_safe()

            with colC:
                if st.button("üîÅ Nou quiz", key="btn_new_quiz_after"):
                    # Reset estado post-correcci√≥n y genera otro quiz
                    st.session_state.quiz_corrected = False
                    st.session_state.last_score = {}
                    st.session_state.quiz = generar_quiz(st.session_state.quiz_n)
                    rerun_safe()


elif opcio == "üèÜ R√†nquing":
    import pandas as pd
    from datetime import datetime

    st.header("üèÜ R√†nquing")

    # Bot√≥n de refresco (limpia cach√© y relee)
    if st.button("üîÑ Actualitza r√†nquing ara"):
        st.cache_data.clear()
        rerun_safe()

    # Leer datos
    scores, _ = load_scores_from_github()

    if not scores:
        st.info("Encara no hi ha puntuacions al r√†nquing.")
    else:
        # Orden: % y fecha desc
        def pct(r):
            den = max(1, r.get("total", 1))
            return (r.get("puntuacio", 0) / den)

        def parse_dt(s: str):
            try:
                return datetime.strptime(s, "%Y-%m-%d %H:%M")
            except Exception:
                return datetime.min

        scores_sorted = sorted(
            scores,
            key=lambda r: (pct(r), parse_dt(r.get("data", ""))),
            reverse=True
        )

        rows = []
        for r in scores_sorted:
            num = r.get("puntuacio", 0)
            den = max(1, r.get("total", 1))
            rows.append({
                "Nom": r.get("nom", "‚Äî"),
                "Punts": f"{num}/{den}",
                "%": round(100 * num / den),
                "Data": r.get("data", "‚Äî"),
            })

        df = pd.DataFrame(rows)

        st.dataframe(df, hide_index=True, use_container_width=True)

        # Descarga CSV (aseg√∫rate de crear df ANTES de este bot√≥n)
        csv = df.to_csv(index=False).encode("utf-8")
        st.download_button(
            "‚¨áÔ∏è Descarrega CSV",
            data=csv,
            file_name="ranking.csv",
            mime="text/csv",
            key="btn_download_rank"
        )

# ‚Äî‚Äî‚Äî Redirecci√≥ autom√†tica al r√†nquing despr√©s del quiz ‚Äî‚Äî‚Äî
if st.session_state.get("__go_rank__"):
    st.session_state["__go_rank__"] = False
    opcio = "üèÜ R√†nquing"
    st.experimental_rerun()

























